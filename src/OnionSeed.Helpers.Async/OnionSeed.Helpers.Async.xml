<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OnionSeed.Helpers.Async</name>
    </assembly>
    <members>
        <member name="T:OnionSeed.Helpers.Async.AsyncExtensions">
            <summary>
            Contains extension methods for asynchronous operations.
            </summary>
        </member>
        <member name="M:OnionSeed.Helpers.Async.AsyncExtensions.RunSynchronously(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Runs the given async method synchronously on the default <see cref="T:System.Threading.Tasks.TaskScheduler"/>.
            </summary>
            <param name="method">The async method to be run.</param>
        </member>
        <member name="M:OnionSeed.Helpers.Async.AsyncExtensions.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Runs the given async method synchronously on the default <see cref="T:System.Threading.Tasks.TaskScheduler"/>
            and returns the result.
            </summary>
            <typeparam name="TResult">The type of the return value of the async method.</typeparam>
            <param name="method">The async method to be run.</param>
            <returns>The result of executing the given async function.</returns>
        </member>
        <member name="T:OnionSeed.Helpers.Async.TaskHelpers">
            <summary>
            Contains static helpers for <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="P:OnionSeed.Helpers.Async.TaskHelpers.CompletedTask">
            <summary>
            Gets a task that has already completed successfully.
            </summary>
        </member>
        <member name="M:OnionSeed.Helpers.Async.TaskHelpers.FromException(System.Exception)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.Task"/> that has completed with a specified exception.</summary>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> is <c>null</c>.</exception>
        </member>
        <member name="M:OnionSeed.Helpers.Async.TaskHelpers.FromException``1(System.Exception)">
            <summary>Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that's completed with a specified exception.</summary>
            <typeparam name="TResult">The type of the result returned by the task.</typeparam>
            <param name="exception">The exception with which to complete the task.</param>
            <returns>The faulted task.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="exception"/> is <c>null</c>.</exception>
        </member>
    </members>
</doc>
